// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`helpers / cssSnapshots with a Bootstrap import should find external files 1`] = `"test"`;

exports[`helpers / cssSnapshots with a custom renderer should process a file and log 1`] = `
{
  "exampleFileContents": "exampleFileContents",
  "exampleFileName": "exampleFileName",
}
`;

exports[`helpers / cssSnapshots with allowUnknownClassnames enabled should return a dts file that allows any string value 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'localClassInsideGlobal': string; };
  interface classes { 'localClass': string; };
  interface classes { 'localClass2': string; };
  interface classes { 'localClassInsideLocal': string; };
  interface classes { 'reservedWords': string; };
  interface classes { 'default': string; };
  interface classes { 'const': string; };
  interface classes { 'nestedClassParent': string; };
  interface classes { 'childClass': string; };
  interface classes { 'nestedClassParentExtended': string; };
  interface classes { 'section1': string; };
  interface classes { 'section2': string; };
  interface classes { 'section3': string; };
  interface classes { 'section4': string; };
  interface classes { 'section5': string; };
  interface classes { 'section6': string; };
  interface classes { 'section7': string; };
  interface classes { 'section8': string; };
  interface classes { 'section9': string; };
  interface classes { 'classWithMixin': string; };
  interface classes { 'appLogo': string; };
  interface classes { 'appLogo': string; };
  interface classes { 'myAnimation': string; };
  interface classes { 'myFolderIndex': string; };export let localClassInsideGlobal: string;
export let localClass: string;
export let localClass2: string;
export let localClassInsideLocal: string;
export let reservedWords: string;
export let nestedClassParent: string;
export let childClass: string;
export let nestedClassParentExtended: string;
export let section1: string;
export let section2: string;
export let section3: string;
export let section4: string;
export let section5: string;
export let section6: string;
export let section7: string;
export let section8: string;
export let section9: string;
export let classWithMixin: string;
export let appLogo: string;
export let appLogo: string;
export let myAnimation: string;
export let myFolderIndex: string;

  interface classes { [key: string]: string };
    
    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with baseUrl and paths in compilerOptions sass should find the files 1`] = `
{
  "big-font": "big-font",
  "class-with-mixin": "class-with-mixin",
  "public-module": "public-module",
}
`;

exports[`helpers / cssSnapshots with file 'empty.module.less' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; 
    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'empty.module.less' getCssExports should return an object matching expected CSS 1`] = `{}`;

exports[`helpers / cssSnapshots with file 'empty.module.less' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; 
    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = '';"
`;

exports[`helpers / cssSnapshots with file 'empty.module.sass' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; 
    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'empty.module.sass' getCssExports should return an object matching expected CSS 1`] = `{}`;

exports[`helpers / cssSnapshots with file 'empty.module.sass' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; 
    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = '';"
`;

exports[`helpers / cssSnapshots with file 'empty.module.scss' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; 
    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'empty.module.scss' getCssExports should return an object matching expected CSS 1`] = `{}`;

exports[`helpers / cssSnapshots with file 'empty.module.scss' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; 
    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = '';"
`;

exports[`helpers / cssSnapshots with file 'empty.module.styl' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; 
    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'empty.module.styl' getCssExports should return an object matching expected CSS 1`] = `{}`;

exports[`helpers / cssSnapshots with file 'empty.module.styl' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; 
    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = '';"
`;

exports[`helpers / cssSnapshots with file 'import.module.css' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'classA': string; };
  interface classes { 'ClassB': string; };
  interface classes { 'class-c': string; };
  interface classes { 'class_d': string; };
  interface classes { 'parent': string; };
  interface classes { 'childA': string; };
  interface classes { 'childB': string; };
  interface classes { 'nestedChild': string; };
  interface classes { 'composed': string; };
  interface classes { 'composed-from-other-file': string; };
  interface classes { 'fadeIn': string; };export let classA: string;
export let ClassB: string;
export let class_d: string;
export let parent: string;
export let childA: string;
export let childB: string;
export let nestedChild: string;
export let composed: string;
export let fadeIn: string;

    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'import.module.css' getCssExports should return an object matching expected CSS 1`] = `
{
  "ClassB": "ClassB",
  "childA": "childA",
  "childB": "childB",
  "class-c": "class-c",
  "classA": "classA",
  "class_d": "class_d",
  "composed": "composed classA",
  "composed-from-other-file": "composed-from-other-file i__imported_className_1",
  "fadeIn": "fadeIn",
  "nestedChild": "nestedChild",
  "parent": "parent",
}
`;

exports[`helpers / cssSnapshots with file 'import.module.css' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; interface classes { 'classA': string; };
  interface classes { 'ClassB': string; };
  interface classes { 'class-c': string; };
  interface classes { 'class_d': string; };
  interface classes { 'parent': string; };
  interface classes { 'childA': string; };
  interface classes { 'childB': string; };
  interface classes { 'nestedChild': string; };
  interface classes { 'composed': string; };
  interface classes { 'composed-from-other-file': string; };
  interface classes { 'fadeIn': string; };export let classA: string;
export let ClassB: string;
export let class_d: string;
export let parent: string;
export let childA: string;
export let childB: string;
export let nestedChild: string;
export let composed: string;
export let fadeIn: string;

    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = 'classA' | 'ClassB' | 'class-c' | 'class_d' | 'parent' | 'childA' | 'childB' | 'nestedChild' | 'composed' | 'composed-from-other-file' | 'fadeIn';"
`;

exports[`helpers / cssSnapshots with file 'import.module.less' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'nested-class-parent': string; };
  interface classes { 'child-class': string; };
  interface classes { 'selector-blue': string; };
  interface classes { 'selector-green': string; };
  interface classes { 'selector-red': string; };
  interface classes { 'column-1': string; };
  interface classes { 'column-2': string; };
  interface classes { 'column-3': string; };
  interface classes { 'column-4': string; };
  interface classes { 'color-set': string; };
    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'import.module.less' getCssExports should return an object matching expected CSS 1`] = `
{
  "child-class": "child-class",
  "color-set": "color-set",
  "column-1": "column-1",
  "column-2": "column-2",
  "column-3": "column-3",
  "column-4": "column-4",
  "nested-class-parent": "nested-class-parent",
  "selector-blue": "selector-blue",
  "selector-green": "selector-green",
  "selector-red": "selector-red",
}
`;

exports[`helpers / cssSnapshots with file 'import.module.less' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; interface classes { 'nested-class-parent': string; };
  interface classes { 'child-class': string; };
  interface classes { 'selector-blue': string; };
  interface classes { 'selector-green': string; };
  interface classes { 'selector-red': string; };
  interface classes { 'column-1': string; };
  interface classes { 'column-2': string; };
  interface classes { 'column-3': string; };
  interface classes { 'column-4': string; };
  interface classes { 'color-set': string; };
    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = 'nested-class-parent' | 'child-class' | 'selector-blue' | 'selector-green' | 'selector-red' | 'column-1' | 'column-2' | 'column-3' | 'column-4' | 'color-set';"
`;

exports[`helpers / cssSnapshots with file 'import.module.styl' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'foo': string; };
  interface classes { 'bar': string; };
  interface classes { 'baz': string; };
  interface classes { 'col-1': string; };
  interface classes { 'col-2': string; };
  interface classes { 'col-3': string; };
  interface classes { 'local-class-1': string; };
  interface classes { 'inside-local': string; };
  interface classes { 'inside-1-name-2': string; };
  interface classes { 'inside-2-name-1': string; };export let foo: string;
export let bar: string;
export let baz: string;

    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'import.module.styl' getCssExports should return an object matching expected CSS 1`] = `
{
  "bar": "bar",
  "baz": "baz",
  "col-1": "col-1",
  "col-2": "col-2",
  "col-3": "col-3",
  "foo": "foo",
  "inside-1-name-2": "inside-1-name-2",
  "inside-2-name-1": "inside-2-name-1",
  "inside-local": "inside-local",
  "local-class-1": "local-class-1",
}
`;

exports[`helpers / cssSnapshots with file 'import.module.styl' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; interface classes { 'foo': string; };
  interface classes { 'bar': string; };
  interface classes { 'baz': string; };
  interface classes { 'col-1': string; };
  interface classes { 'col-2': string; };
  interface classes { 'col-3': string; };
  interface classes { 'local-class-1': string; };
  interface classes { 'inside-local': string; };
  interface classes { 'inside-1-name-2': string; };
  interface classes { 'inside-2-name-1': string; };export let foo: string;
export let bar: string;
export let baz: string;

    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = 'foo' | 'bar' | 'baz' | 'col-1' | 'col-2' | 'col-3' | 'local-class-1' | 'inside-local' | 'inside-1-name-2' | 'inside-2-name-1';"
`;

exports[`helpers / cssSnapshots with file 'postcss.module.css' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'classA': string; };
  interface classes { 'nestedA': string; };
  interface classes { 'nested_B': string; };
  interface classes { 'deeplyNested': string; };
  interface classes { 'nested-c': string; };
  interface classes { 'parent': string; };export let classA: string;
export let nestedA: string;
export let nested_B: string;
export let deeplyNested: string;
export let parent: string;

    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'postcss.module.css' getCssExports should return an object matching expected CSS 1`] = `
{
  "classA": "classA",
  "deeplyNested": "deeplyNested",
  "nested-c": "nested-c",
  "nestedA": "nestedA",
  "nested_B": "nested_B",
  "parent": "parent",
}
`;

exports[`helpers / cssSnapshots with file 'postcss.module.css' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; interface classes { 'classA': string; };
  interface classes { 'nestedA': string; };
  interface classes { 'nested_B': string; };
  interface classes { 'deeplyNested': string; };
  interface classes { 'nested-c': string; };
  interface classes { 'parent': string; };export let classA: string;
export let nestedA: string;
export let nested_B: string;
export let deeplyNested: string;
export let parent: string;

    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = 'classA' | 'nestedA' | 'nested_B' | 'deeplyNested' | 'nested-c' | 'parent';"
`;

exports[`helpers / cssSnapshots with file 'test.module.css' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'classA': string; };
  interface classes { 'ClassB': string; };
  interface classes { 'class-c': string; };
  interface classes { 'class_d': string; };
  interface classes { 'parent': string; };
  interface classes { 'childA': string; };
  interface classes { 'childB': string; };
  interface classes { 'nestedChild': string; };
  interface classes { 'composed': string; };
  interface classes { 'composed-from-other-file': string; };
  interface classes { 'fadeIn': string; };export let classA: string;
export let ClassB: string;
export let class_d: string;
export let parent: string;
export let childA: string;
export let childB: string;
export let nestedChild: string;
export let composed: string;
export let fadeIn: string;

    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'test.module.css' getCssExports should return an object matching expected CSS 1`] = `
{
  "ClassB": "ClassB",
  "childA": "childA",
  "childB": "childB",
  "class-c": "class-c",
  "classA": "classA",
  "class_d": "class_d",
  "composed": "composed classA",
  "composed-from-other-file": "composed-from-other-file i__imported_className_2",
  "fadeIn": "fadeIn",
  "nestedChild": "nestedChild",
  "parent": "parent",
}
`;

exports[`helpers / cssSnapshots with file 'test.module.css' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; interface classes { 'classA': string; };
  interface classes { 'ClassB': string; };
  interface classes { 'class-c': string; };
  interface classes { 'class_d': string; };
  interface classes { 'parent': string; };
  interface classes { 'childA': string; };
  interface classes { 'childB': string; };
  interface classes { 'nestedChild': string; };
  interface classes { 'composed': string; };
  interface classes { 'composed-from-other-file': string; };
  interface classes { 'fadeIn': string; };export let classA: string;
export let ClassB: string;
export let class_d: string;
export let parent: string;
export let childA: string;
export let childB: string;
export let nestedChild: string;
export let composed: string;
export let fadeIn: string;

    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = 'classA' | 'ClassB' | 'class-c' | 'class_d' | 'parent' | 'childA' | 'childB' | 'nestedChild' | 'composed' | 'composed-from-other-file' | 'fadeIn';"
`;

exports[`helpers / cssSnapshots with file 'test.module.less' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'nested-class-parent': string; };
  interface classes { 'child-class': string; };
  interface classes { 'selector-blue': string; };
  interface classes { 'selector-green': string; };
  interface classes { 'selector-red': string; };
  interface classes { 'column-1': string; };
  interface classes { 'column-2': string; };
  interface classes { 'column-3': string; };
  interface classes { 'column-4': string; };
  interface classes { 'color-set': string; };
    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'test.module.less' getCssExports should return an object matching expected CSS 1`] = `
{
  "child-class": "child-class",
  "color-set": "color-set",
  "column-1": "column-1",
  "column-2": "column-2",
  "column-3": "column-3",
  "column-4": "column-4",
  "nested-class-parent": "nested-class-parent",
  "selector-blue": "selector-blue",
  "selector-green": "selector-green",
  "selector-red": "selector-red",
}
`;

exports[`helpers / cssSnapshots with file 'test.module.less' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; interface classes { 'nested-class-parent': string; };
  interface classes { 'child-class': string; };
  interface classes { 'selector-blue': string; };
  interface classes { 'selector-green': string; };
  interface classes { 'selector-red': string; };
  interface classes { 'column-1': string; };
  interface classes { 'column-2': string; };
  interface classes { 'column-3': string; };
  interface classes { 'column-4': string; };
  interface classes { 'color-set': string; };
    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = 'nested-class-parent' | 'child-class' | 'selector-blue' | 'selector-green' | 'selector-red' | 'column-1' | 'column-2' | 'column-3' | 'column-4' | 'color-set';"
`;

exports[`helpers / cssSnapshots with file 'test.module.sass' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'local-class-inside-global': string; };
  interface classes { 'local-class': string; };
  interface classes { 'local-class-2': string; };
  interface classes { 'local-class-inside-local': string; };
  interface classes { 'reserved-words': string; };
  interface classes { 'default': string; };
  interface classes { 'const': string; };
  interface classes { 'nested-class-parent': string; };
  interface classes { 'child-class': string; };
  interface classes { 'nested-class-parent--extended': string; };
  interface classes { 'section-1': string; };
  interface classes { 'section-2': string; };
  interface classes { 'section-3': string; };
  interface classes { 'section-4': string; };
  interface classes { 'section-5': string; };
  interface classes { 'section-6': string; };
  interface classes { 'section-7': string; };
  interface classes { 'section-8': string; };
  interface classes { 'section-9': string; };
  interface classes { 'class-with-mixin': string; };
    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'test.module.sass' getCssExports should return an object matching expected CSS 1`] = `
{
  "child-class": "child-class",
  "class-with-mixin": "class-with-mixin",
  "const": "const",
  "default": "default",
  "local-class": "local-class",
  "local-class-2": "local-class-2",
  "local-class-inside-global": "local-class-inside-global",
  "local-class-inside-local": "local-class-inside-local",
  "nested-class-parent": "nested-class-parent",
  "nested-class-parent--extended": "nested-class-parent--extended",
  "reserved-words": "reserved-words",
  "section-1": "section-1",
  "section-2": "section-2",
  "section-3": "section-3",
  "section-4": "section-4",
  "section-5": "section-5",
  "section-6": "section-6",
  "section-7": "section-7",
  "section-8": "section-8",
  "section-9": "section-9",
}
`;

exports[`helpers / cssSnapshots with file 'test.module.sass' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; interface classes { 'local-class-inside-global': string; };
  interface classes { 'local-class': string; };
  interface classes { 'local-class-2': string; };
  interface classes { 'local-class-inside-local': string; };
  interface classes { 'reserved-words': string; };
  interface classes { 'default': string; };
  interface classes { 'const': string; };
  interface classes { 'nested-class-parent': string; };
  interface classes { 'child-class': string; };
  interface classes { 'nested-class-parent--extended': string; };
  interface classes { 'section-1': string; };
  interface classes { 'section-2': string; };
  interface classes { 'section-3': string; };
  interface classes { 'section-4': string; };
  interface classes { 'section-5': string; };
  interface classes { 'section-6': string; };
  interface classes { 'section-7': string; };
  interface classes { 'section-8': string; };
  interface classes { 'section-9': string; };
  interface classes { 'class-with-mixin': string; };
    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = 'local-class-inside-global' | 'local-class' | 'local-class-2' | 'local-class-inside-local' | 'reserved-words' | 'default' | 'const' | 'nested-class-parent' | 'child-class' | 'nested-class-parent--extended' | 'section-1' | 'section-2' | 'section-3' | 'section-4' | 'section-5' | 'section-6' | 'section-7' | 'section-8' | 'section-9' | 'class-with-mixin';"
`;

exports[`helpers / cssSnapshots with file 'test.module.scss' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'local-class-inside-global': string; };
  interface classes { 'local-class': string; };
  interface classes { 'local-class-2': string; };
  interface classes { 'local-class-inside-local': string; };
  interface classes { 'reserved-words': string; };
  interface classes { 'default': string; };
  interface classes { 'const': string; };
  interface classes { 'nested-class-parent': string; };
  interface classes { 'child-class': string; };
  interface classes { 'nested-class-parent--extended': string; };
  interface classes { 'section-1': string; };
  interface classes { 'section-2': string; };
  interface classes { 'section-3': string; };
  interface classes { 'section-4': string; };
  interface classes { 'section-5': string; };
  interface classes { 'section-6': string; };
  interface classes { 'section-7': string; };
  interface classes { 'section-8': string; };
  interface classes { 'section-9': string; };
  interface classes { 'class-with-mixin': string; };
  interface classes { 'App_logo': string; };
  interface classes { 'App-logo': string; };
  interface classes { 'my-animation': string; };
  interface classes { 'my-folder-index': string; };export let App_logo: string;

    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'test.module.scss' getCssExports should return an object matching expected CSS 1`] = `
{
  "App-logo": "App-logo",
  "App_logo": "App_logo",
  "child-class": "child-class",
  "class-with-mixin": "class-with-mixin",
  "const": "const",
  "default": "default",
  "local-class": "local-class",
  "local-class-2": "local-class-2",
  "local-class-inside-global": "local-class-inside-global",
  "local-class-inside-local": "local-class-inside-local",
  "my-animation": "my-animation",
  "my-folder-index": "my-folder-index",
  "nested-class-parent": "nested-class-parent",
  "nested-class-parent--extended": "nested-class-parent--extended",
  "reserved-words": "reserved-words",
  "section-1": "section-1",
  "section-2": "section-2",
  "section-3": "section-3",
  "section-4": "section-4",
  "section-5": "section-5",
  "section-6": "section-6",
  "section-7": "section-7",
  "section-8": "section-8",
  "section-9": "section-9",
}
`;

exports[`helpers / cssSnapshots with file 'test.module.scss' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; interface classes { 'local-class-inside-global': string; };
  interface classes { 'local-class': string; };
  interface classes { 'local-class-2': string; };
  interface classes { 'local-class-inside-local': string; };
  interface classes { 'reserved-words': string; };
  interface classes { 'default': string; };
  interface classes { 'const': string; };
  interface classes { 'nested-class-parent': string; };
  interface classes { 'child-class': string; };
  interface classes { 'nested-class-parent--extended': string; };
  interface classes { 'section-1': string; };
  interface classes { 'section-2': string; };
  interface classes { 'section-3': string; };
  interface classes { 'section-4': string; };
  interface classes { 'section-5': string; };
  interface classes { 'section-6': string; };
  interface classes { 'section-7': string; };
  interface classes { 'section-8': string; };
  interface classes { 'section-9': string; };
  interface classes { 'class-with-mixin': string; };
  interface classes { 'App_logo': string; };
  interface classes { 'App-logo': string; };
  interface classes { 'my-animation': string; };
  interface classes { 'my-folder-index': string; };export let App_logo: string;

    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = 'local-class-inside-global' | 'local-class' | 'local-class-2' | 'local-class-inside-local' | 'reserved-words' | 'default' | 'const' | 'nested-class-parent' | 'child-class' | 'nested-class-parent--extended' | 'section-1' | 'section-2' | 'section-3' | 'section-4' | 'section-5' | 'section-6' | 'section-7' | 'section-8' | 'section-9' | 'class-with-mixin' | 'App_logo' | 'App-logo' | 'my-animation' | 'my-folder-index';"
`;

exports[`helpers / cssSnapshots with file 'test.module.styl' createExports should create an exports file 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'foo': string; };
  interface classes { 'bar': string; };
  interface classes { 'baz': string; };
  interface classes { 'col-1': string; };
  interface classes { 'col-2': string; };
  interface classes { 'col-3': string; };
  interface classes { 'local-class-1': string; };
  interface classes { 'inside-local': string; };
  interface classes { 'inside-1-name-2': string; };
  interface classes { 'inside-2-name-1': string; };export let foo: string;
export let bar: string;
export let baz: string;

    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with file 'test.module.styl' getCssExports should return an object matching expected CSS 1`] = `
{
  "bar": "bar",
  "baz": "baz",
  "col-1": "col-1",
  "col-2": "col-2",
  "col-3": "col-3",
  "foo": "foo",
  "inside-1-name-2": "inside-1-name-2",
  "inside-2-name-1": "inside-2-name-1",
  "inside-local": "inside-local",
  "local-class-1": "local-class-1",
}
`;

exports[`helpers / cssSnapshots with file 'test.module.styl' with a custom template should transform the generated dts 1`] = `
"/* eslint-disable */
interface classes { }; declare let _classes: classes; interface classes { 'foo': string; };
  interface classes { 'bar': string; };
  interface classes { 'baz': string; };
  interface classes { 'col-1': string; };
  interface classes { 'col-2': string; };
  interface classes { 'col-3': string; };
  interface classes { 'local-class-1': string; };
  interface classes { 'inside-local': string; };
  interface classes { 'inside-1-name-2': string; };
  interface classes { 'inside-2-name-1': string; };export let foo: string;
export let bar: string;
export let baz: string;

    export default _classes;
    
export const __cssModule: true;
export type AllClassNames = 'foo' | 'bar' | 'baz' | 'col-1' | 'col-2' | 'col-3' | 'local-class-1' | 'inside-local' | 'inside-1-name-2' | 'inside-2-name-1';"
`;

exports[`helpers / cssSnapshots with goToDefinition enabled with CSS should return a line-accurate dts file 1`] = `
"interface classes { }; declare let _classes: classes; export let classA: string;interface classes { 'classA': string; };export let composed: string;interface classes { 'composed': string; };export let composedFromOtherFile: string;interface classes { 'composedFromOtherFile': string; };



export let classB: string;interface classes { 'classB': string; };



export let classC: string;interface classes { 'classC': string; };



export let classD: string;interface classes { 'classD': string; };





export let parent: string;interface classes { 'parent': string; };export let childA: string;interface classes { 'childA': string; };



export let childB: string;interface classes { 'childB': string; };export let nestedChild: string;interface classes { 'nestedChild': string; };





export let fadeIn: string;interface classes { 'fadeIn': string; };













    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with goToDefinition enabled with CSS should return an object with classes, css, and a source map 1`] = `
{
  "classes": {
    "ClassB": "ClassB",
    "childA": "childA",
    "childB": "childB",
    "class-c": "class-c",
    "classA": "classA",
    "class_d": "class_d",
    "composed": "composed classA",
    "composed-from-other-file": "composed-from-other-file i__imported_className_0",
    "fadeIn": "fadeIn",
    "nestedChild": "nestedChild",
    "parent": "parent",
  },
  "css": ".classA {
  color: rebeccapurple;
}

.ClassB {
  color: rebeccapurple;
}

.class-c {
  color: rebeccapurple;
}

.class_d {
  @mixin postcss-mixin;
  color: rebeccapurple;
}

.parent .childA {
    color: rebeccapurple;
  }

.parent .childB .nestedChild {
      color: rebeccapurple;
    }

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.composed {
  display: block;
}

.composed-from-other-file {
}

/*# sourceMappingURL=src/helpers/__tests__/fixtures/test.module.css.map */",
  "sourceMap": {
    "file": "src/helpers/__tests__/fixtures/test.module.css",
    "mappings": "AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,oBAAoB;EACpB,oBAAoB;AACtB;;AAGE;IACE,oBAAoB;EACtB;;AAEE;MACE,oBAAoB;IACtB;;AAIJ;EACE;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF;;AAEA;EAEE,cAAc;AAChB;;AAEA;AAEA",
    "names": [],
    "sources": [
      "src/helpers/__tests__/fixtures/test.module.css",
    ],
    "sourcesContent": [
      ".classA {
  color: rebeccapurple;
}

.ClassB {
  color: rebeccapurple;
}

.class-c {
  color: rebeccapurple;
}

.class_d {
  @mixin postcss-mixin;
  color: rebeccapurple;
}

.parent {
  .childA {
    color: rebeccapurple;
  }
  .childB {
    .nestedChild {
      color: rebeccapurple;
    }
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.composed {
  composes: classA;
  display: block;
}

.composed-from-other-file {
  composes: className from './_composed.css';
}
",
    ],
    "version": 3,
  },
}
`;

exports[`helpers / cssSnapshots with goToDefinition enabled with Less should return a line-accurate dts file 1`] = `
"interface classes { }; declare let _classes: classes; export let nestedClassParent: string;interface classes { 'nestedClassParent': string; };export let childClass: string;interface classes { 'childClass': string; };










export let selectorBlue: string;interface classes { 'selectorBlue': string; };export let selectorGreen: string;interface classes { 'selectorGreen': string; };export let selectorRed: string;interface classes { 'selectorRed': string; };





export let column1: string;interface classes { 'column1': string; };export let column2: string;interface classes { 'column2': string; };export let column3: string;interface classes { 'column3': string; };export let column4: string;interface classes { 'column4': string; };











export let colorSet: string;interface classes { 'colorSet': string; };




    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with goToDefinition enabled with Less should return an object with classes, css, and a source map 1`] = `
{
  "classes": {
    "child-class": "child-class",
    "color-set": "color-set",
    "column-1": "column-1",
    "column-2": "column-2",
    "column-3": "column-3",
    "column-4": "column-4",
    "nested-class-parent": "nested-class-parent",
    "selector-blue": "selector-blue",
    "selector-green": "selector-green",
    "selector-red": "selector-red",
  },
  "css": ".nested-class-parent {
  color: black;
}
.nested-class-parent .child-class {
  font-size: 12px;
}
.selector-blue {
  color: b;
}
.selector-green {
  color: b;
}
.selector-red {
  color: b;
}
.column-1 {
  height: 50px;
}
.column-2 {
  height: 100px;
}
.column-3 {
  height: 150px;
}
.column-4 {
  height: 200px;
}
/* prettier-ignore */
.color-set {
  one-1: blue;
  two-2: green;
  three-3: red;
}
",
  "sourceMap": {
    "file": "src/helpers/__tests__/fixtures/test.module.less",
    "mappings": "AAAA;EACE,YAAA;ACCF;ADFA;EAII,eAAA;ACCJ;ADMG;EACC,QAAA;ACJJ;ADGG;EACC,QAAA;ACDJ;ADAG;EACC,QAAA;ACEJ;ADGG;EACC,YAAA;ACDJ;ADAG;EACC,aAAA;ACEJ;ADHG;EACC,aAAA;ACKJ;ADNG;EACC,aAAA;ACQJ;AACA,oBAAoB;ADEpB;EAEI,WAAA;EAAA,YAAA;EAAA,YAAA;ACCJ",
    "names": [],
    "sources": [
      "[cwd]/src/helpers/__tests__/fixtures/test.module.less",
      "src/helpers/__tests__/fixtures/test.module.less",
    ],
    "version": 3,
  },
}
`;

exports[`helpers / cssSnapshots with goToDefinition enabled with Sass should return a line-accurate dts file 1`] = `
"interface classes { }; declare let _classes: classes; 

export let myFolderIndex: string;interface classes { 'myFolderIndex': string; };


export let localClassInsideGlobal: string;interface classes { 'localClassInsideGlobal': string; };




export let localClass: string;interface classes { 'localClass': string; };




export let localClass2: string;interface classes { 'localClass2': string; };export let localClassInsideLocal: string;interface classes { 'localClassInsideLocal': string; };





export let reservedWords: string;interface classes { 'reservedWords': string; };interface classes { 'default': string; };


interface classes { 'const': string; };





export let nestedClassParent: string;interface classes { 'nestedClassParent': string; };export let childClass: string;interface classes { 'childClass': string; };


export let nestedClassParentExtended: string;interface classes { 'nestedClassParentExtended': string; };







export let section1: string;interface classes { 'section1': string; };export let section2: string;interface classes { 'section2': string; };export let section3: string;interface classes { 'section3': string; };export let section4: string;interface classes { 'section4': string; };export let section5: string;interface classes { 'section5': string; };export let section6: string;interface classes { 'section6': string; };export let section7: string;interface classes { 'section7': string; };export let section8: string;interface classes { 'section8': string; };export let section9: string;interface classes { 'section9': string; };






export let classWithMixin: string;interface classes { 'classWithMixin': string; };



export let appLogo: string;interface classes { 'appLogo': string; };





export let appLogo: string;interface classes { 'appLogo': string; };
export let myAnimation: string;interface classes { 'myAnimation': string; };

































    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with goToDefinition enabled with Sass should return an object with classes, css, and a source map 1`] = `
{
  "classes": {
    "App-logo": "App-logo",
    "App_logo": "App_logo",
    "child-class": "child-class",
    "class-with-mixin": "class-with-mixin",
    "const": "const",
    "default": "default",
    "local-class": "local-class",
    "local-class-2": "local-class-2",
    "local-class-inside-global": "local-class-inside-global",
    "local-class-inside-local": "local-class-inside-local",
    "my-animation": "my-animation",
    "my-folder-index": "my-folder-index",
    "nested-class-parent": "nested-class-parent",
    "nested-class-parent--extended": "nested-class-parent--extended",
    "reserved-words": "reserved-words",
    "section-1": "section-1",
    "section-2": "section-2",
    "section-3": "section-3",
    "section-4": "section-4",
    "section-5": "section-5",
    "section-6": "section-6",
    "section-7": "section-7",
    "section-8": "section-8",
    "section-9": "section-9",
  },
  "css": ".global-class {
  color: rebeccapurple;
}

.global-class-2 .local-class-inside-global {
  color: rebeccapurple;
}

.local-class {
  color: rebeccapurple;
}

.local-class-2 .local-class-inside-local {
  color: rebeccapurple;
}

.reserved-words .default {
  color: rebeccapurple;
}

.reserved-words .const {
  color: rebeccapurple;
}

.nested-class-parent .child-class {
  color: rebeccapurple;
}

.nested-class-parent--extended {
  color: rebeccapurple;
}

.section-1 {
  color: rebeccapurple;
}

.section-2 {
  color: rebeccapurple;
}

.section-3 {
  color: rebeccapurple;
}

.section-4 {
  color: rebeccapurple;
}

.section-5 {
  color: rebeccapurple;
}

.section-6 {
  color: rebeccapurple;
}

.section-7 {
  color: rebeccapurple;
}

.section-8 {
  color: rebeccapurple;
}

.section-9 {
  color: rebeccapurple;
}

.class-with-mixin {
  margin: 0;
}

.App_logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: my-animation infinite 20s linear;
  }
}

/*
.commented-parent-class {
  .commented-child-class
}
*/

.my-folder-index {
  text-indent: 9999px;
  margin: 10px;
}",
  "sourceMap": {
    "file": "src/helpers/__tests__/fixtures/test.module.scss",
    "mappings": "AAAA;EACE,oBAAA;ACCF;;ADGE;EACE,oBAAA;ACAJ;;ADIA;EACE,oBAAA;ACDF;;ADKE;EACE,oBAAA;ACFJ;;ADOE;EACE,oBAAA;ACJJ;;ADME;EACE,oBAAA;ACJJ;;ADSE;EACE,oBAAA;ACNJ;;ADQE;EACE,oBAAA;ACNJ;;ADaE;EACE,oBAJI;ACNR;;ADSE;EACE,oBAJI;ACFR;;ADKE;EACE,oBAJI;ACER;;ADCE;EACE,oBAJI;ACMR;;ADHE;EACE,oBAJI;ACUR;;ADPE;EACE,oBAJI;ACcR;;ADXE;EACE,oBAJI;ACkBR;;ADfE;EACE,oBAJI;ACsBR;;ADnBE;EACE,oBAJI;AC0BR;;ADhBA;EE/CE,SFgDoB;ACmBtB;;ADhBA;EACE,cAAA;EACA,oBAAA;ACmBF;;ADhBA;EACE;IACE,2CAAA;ECmBF;AACF;;ADZA;;;;CAAA;;AGjEA;EACE,mBAAA;EDFA,YCGoB;AFoFtB",
    "names": [],
    "sources": [
      "file://[cwd]/src/helpers/__tests__/fixtures/test.module.scss",
      "src/helpers/__tests__/fixtures/test.module.scss",
      "file://[cwd]/src/helpers/__tests__/fixtures/_mixin.scss",
      "file://[cwd]/src/helpers/__tests__/fixtures/my-folder/_index.scss",
    ],
    "version": 3,
  },
}
`;

exports[`helpers / cssSnapshots with loadPaths in sass options should find external file from loadPaths 1`] = `
{
  "big-font": "big-font",
  "class-with-mixin": "class-with-mixin",
}
`;

exports[`helpers / cssSnapshots with loadPaths in stylus options should find external file from loadPaths 1`] = `
{
  "external-class": "external-class",
  "include-path": "include-path",
}
`;

exports[`helpers / cssSnapshots with noUncheckedIndexedAccess enabled should return a dts file with only possibly undefined strings 1`] = `
"interface classes { }; declare let _classes: classes; interface classes { 'localClassInsideGlobal'?: string; };
  interface classes { 'localClass'?: string; };
  interface classes { 'localClass2'?: string; };
  interface classes { 'localClassInsideLocal'?: string; };
  interface classes { 'reservedWords'?: string; };
  interface classes { 'default'?: string; };
  interface classes { 'const'?: string; };
  interface classes { 'nestedClassParent'?: string; };
  interface classes { 'childClass'?: string; };
  interface classes { 'nestedClassParentExtended'?: string; };
  interface classes { 'section1'?: string; };
  interface classes { 'section2'?: string; };
  interface classes { 'section3'?: string; };
  interface classes { 'section4'?: string; };
  interface classes { 'section5'?: string; };
  interface classes { 'section6'?: string; };
  interface classes { 'section7'?: string; };
  interface classes { 'section8'?: string; };
  interface classes { 'section9'?: string; };
  interface classes { 'classWithMixin'?: string; };
  interface classes { 'appLogo'?: string; };
  interface classes { 'appLogo'?: string; };
  interface classes { 'myAnimation'?: string; };
  interface classes { 'myFolderIndex'?: string; };export let localClassInsideGlobal: string | undefined;
export let localClass: string | undefined;
export let localClass2: string | undefined;
export let localClassInsideLocal: string | undefined;
export let reservedWords: string | undefined;
export let nestedClassParent: string | undefined;
export let childClass: string | undefined;
export let nestedClassParentExtended: string | undefined;
export let section1: string | undefined;
export let section2: string | undefined;
export let section3: string | undefined;
export let section4: string | undefined;
export let section5: string | undefined;
export let section6: string | undefined;
export let section7: string | undefined;
export let section8: string | undefined;
export let section9: string | undefined;
export let classWithMixin: string | undefined;
export let appLogo: string | undefined;
export let appLogo: string | undefined;
export let myAnimation: string | undefined;
export let myFolderIndex: string | undefined;

    export default _classes;
    "
`;

exports[`helpers / cssSnapshots with sass @use and a partial should find external file from loadPaths 1`] = `
{
  "class-with-partial": "class-with-partial",
}
`;

exports[`helpers / cssSnapshots with sass @use and a partial should find external file from loadPaths 2`] = `
".class-with-partial {
  background-color: rebeccapurple;
}"
`;
